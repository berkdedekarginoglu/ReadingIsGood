// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ReadingIsGood.DataAccess.Concrete.EntityFramework;

namespace ReadingIsGood.DataAccess.Migrations
{
    [DbContext(typeof(EfReadingIsGoodContext))]
    partial class EfReadingIsGoodContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ReadingIsGood.Core.Entities.Concrete.Address", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("ReadingIsGood.Core.Entities.Concrete.Author", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = "6aaf0cc9-0595-4b51-9331-d1618a594bd1",
                            CreatedAt = new DateTime(2021, 9, 6, 14, 39, 49, 190, DateTimeKind.Local).AddTicks(1742),
                            FirstName = "Berk",
                            IsActive = true,
                            LastName = "Berk",
                            UpdatedAt = new DateTime(2021, 9, 6, 14, 39, 49, 191, DateTimeKind.Local).AddTicks(8857)
                        });
                });

            modelBuilder.Entity("ReadingIsGood.Core.Entities.Concrete.Book", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AuthorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ISBN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Pages")
                        .HasColumnType("int");

                    b.Property<int>("ReorderLevel")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UnitsInStock")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("YearOfPublication")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = "09c8704f-c7cf-4144-a456-c22d1100c0bd",
                            AuthorId = "6aaf0cc9-0595-4b51-9331-d1618a594bd1",
                            CreatedAt = new DateTime(2021, 9, 6, 14, 39, 49, 194, DateTimeKind.Local).AddTicks(330),
                            Description = "Lorem ipsum dolar sit amet",
                            ISBN = "9786052118689",
                            IsActive = true,
                            Name = "ASP.Net",
                            Pages = 200,
                            ReorderLevel = 0,
                            UnitPrice = 25m,
                            UnitsInStock = 100,
                            UpdatedAt = new DateTime(2021, 9, 6, 14, 39, 49, 194, DateTimeKind.Local).AddTicks(2180),
                            YearOfPublication = 1950
                        });
                });

            modelBuilder.Entity("ReadingIsGood.Core.Entities.Concrete.BookCategory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BookId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoryId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("CategoryId");

                    b.ToTable("BookCategories");

                    b.HasData(
                        new
                        {
                            Id = "23b13dd2-0805-489b-bd8f-9a3046bac6db",
                            BookId = "09c8704f-c7cf-4144-a456-c22d1100c0bd",
                            CategoryId = "b36be2c3-8e51-41c5-a5e2-328f7dba4d83"
                        });
                });

            modelBuilder.Entity("ReadingIsGood.Core.Entities.Concrete.BookImage", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BookId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("BookImage");
                });

            modelBuilder.Entity("ReadingIsGood.Core.Entities.Concrete.Category", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParentId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = "b36be2c3-8e51-41c5-a5e2-328f7dba4d83",
                            Name = "Programlama",
                            ParentId = ""
                        });
                });

            modelBuilder.Entity("ReadingIsGood.Core.Entities.Concrete.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlateNo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("ReadingIsGood.Core.Entities.Concrete.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BinaryCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TripleCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("ReadingIsGood.Core.Entities.Concrete.OperationClaim", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OperationClaims");
                });

            modelBuilder.Entity("ReadingIsGood.Core.Entities.Concrete.Order", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AddressId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderStatusId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("RequiredDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ShippedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("OrderStatusId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ReadingIsGood.Core.Entities.Concrete.OrderDetail", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BookId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique()
                        .HasFilter("[OrderId] IS NOT NULL");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("ReadingIsGood.Core.Entities.Concrete.OrderStatus", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OrderStatues");
                });

            modelBuilder.Entity("ReadingIsGood.Core.Entities.Concrete.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DateOfBirth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ReadingIsGood.Core.Entities.Concrete.UserAddress", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AddressId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("UserId");

                    b.ToTable("UserAddresses");
                });

            modelBuilder.Entity("ReadingIsGood.Core.Entities.Concrete.UserOperationClaim", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OperationClaimId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("OperationClaimId");

                    b.HasIndex("UserId");

                    b.ToTable("UserOperationClaims");
                });

            modelBuilder.Entity("ReadingIsGood.Core.Entities.Concrete.Address", b =>
                {
                    b.HasOne("ReadingIsGood.Core.Entities.Concrete.City", "City")
                        .WithMany("Adresses")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("ReadingIsGood.Core.Entities.Concrete.Book", b =>
                {
                    b.HasOne("ReadingIsGood.Core.Entities.Concrete.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("ReadingIsGood.Core.Entities.Concrete.BookCategory", b =>
                {
                    b.HasOne("ReadingIsGood.Core.Entities.Concrete.Book", "Book")
                        .WithMany("BookCategories")
                        .HasForeignKey("BookId");

                    b.HasOne("ReadingIsGood.Core.Entities.Concrete.Category", "Category")
                        .WithMany("BookCategories")
                        .HasForeignKey("CategoryId");

                    b.Navigation("Book");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ReadingIsGood.Core.Entities.Concrete.BookImage", b =>
                {
                    b.HasOne("ReadingIsGood.Core.Entities.Concrete.Book", "Book")
                        .WithMany("BookImages")
                        .HasForeignKey("BookId");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("ReadingIsGood.Core.Entities.Concrete.Category", b =>
                {
                    b.HasOne("ReadingIsGood.Core.Entities.Concrete.Category", null)
                        .WithMany("Categories")
                        .HasForeignKey("CategoryId");
                });

            modelBuilder.Entity("ReadingIsGood.Core.Entities.Concrete.City", b =>
                {
                    b.HasOne("ReadingIsGood.Core.Entities.Concrete.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("ReadingIsGood.Core.Entities.Concrete.Order", b =>
                {
                    b.HasOne("ReadingIsGood.Core.Entities.Concrete.Address", "Address")
                        .WithMany("Orders")
                        .HasForeignKey("AddressId");

                    b.HasOne("ReadingIsGood.Core.Entities.Concrete.OrderStatus", "OrderStatus")
                        .WithMany("Orders")
                        .HasForeignKey("OrderStatusId");

                    b.HasOne("ReadingIsGood.Core.Entities.Concrete.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId");

                    b.Navigation("Address");

                    b.Navigation("OrderStatus");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ReadingIsGood.Core.Entities.Concrete.OrderDetail", b =>
                {
                    b.HasOne("ReadingIsGood.Core.Entities.Concrete.Order", "Order")
                        .WithOne("OrderDetail")
                        .HasForeignKey("ReadingIsGood.Core.Entities.Concrete.OrderDetail", "OrderId");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("ReadingIsGood.Core.Entities.Concrete.UserAddress", b =>
                {
                    b.HasOne("ReadingIsGood.Core.Entities.Concrete.Address", "Address")
                        .WithMany("UserAddress")
                        .HasForeignKey("AddressId");

                    b.HasOne("ReadingIsGood.Core.Entities.Concrete.User", "User")
                        .WithMany("UserAddresses")
                        .HasForeignKey("UserId");

                    b.Navigation("Address");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ReadingIsGood.Core.Entities.Concrete.UserOperationClaim", b =>
                {
                    b.HasOne("ReadingIsGood.Core.Entities.Concrete.OperationClaim", "OperationClaim")
                        .WithMany("UserOperationClaims")
                        .HasForeignKey("OperationClaimId");

                    b.HasOne("ReadingIsGood.Core.Entities.Concrete.User", "User")
                        .WithMany("UserOperationClaims")
                        .HasForeignKey("UserId");

                    b.Navigation("OperationClaim");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ReadingIsGood.Core.Entities.Concrete.Address", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("UserAddress");
                });

            modelBuilder.Entity("ReadingIsGood.Core.Entities.Concrete.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("ReadingIsGood.Core.Entities.Concrete.Book", b =>
                {
                    b.Navigation("BookCategories");

                    b.Navigation("BookImages");
                });

            modelBuilder.Entity("ReadingIsGood.Core.Entities.Concrete.Category", b =>
                {
                    b.Navigation("BookCategories");

                    b.Navigation("Categories");
                });

            modelBuilder.Entity("ReadingIsGood.Core.Entities.Concrete.City", b =>
                {
                    b.Navigation("Adresses");
                });

            modelBuilder.Entity("ReadingIsGood.Core.Entities.Concrete.Country", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("ReadingIsGood.Core.Entities.Concrete.OperationClaim", b =>
                {
                    b.Navigation("UserOperationClaims");
                });

            modelBuilder.Entity("ReadingIsGood.Core.Entities.Concrete.Order", b =>
                {
                    b.Navigation("OrderDetail");
                });

            modelBuilder.Entity("ReadingIsGood.Core.Entities.Concrete.OrderStatus", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("ReadingIsGood.Core.Entities.Concrete.User", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("UserAddresses");

                    b.Navigation("UserOperationClaims");
                });
#pragma warning restore 612, 618
        }
    }
}
